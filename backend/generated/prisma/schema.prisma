generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Pos {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  id_reference Int      @unique
  status       Boolean  @default(false)
  latitude     Float
  longitude    Float
  created_at   DateTime @default(now())

  // Foreign keys
  province_id       String  @db.ObjectId
  city_id           String  @db.ObjectId
  area_id           String  @db.ObjectId
  zone_id           String  @db.ObjectId
  type_id           String  @db.ObjectId
  subtype_id        String? @db.ObjectId
  administration_id String? @db.ObjectId
  agent_id          String? @unique @db.ObjectId
  licence_id        String? @unique @db.ObjectId

  // Relations
  province       Province        @relation(fields: [province_id], references: [id])
  city           City            @relation(fields: [city_id], references: [id])
  area           Area            @relation(fields: [area_id], references: [id])
  zone           Zone            @relation(fields: [zone_id], references: [id])
  type           Type            @relation(fields: [type_id], references: [id])
  subtype        Subtype?        @relation(fields: [subtype_id], references: [id])
  administration Administration? @relation(fields: [administration_id], references: [id])
  agent          Agent?          @relation(fields: [agent_id], references: [id])
  licence        Licence?        @relation(fields: [licence_id], references: [id])

  @@map("pos")
}

model Agent {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  first_name   String
  last_name    String
  id_reference Int          @unique
  phone        Int?
  afrimoney    Int?
  status       String?
  type         String
  zone         String?
  area         String?
  // Relations
  pos          Pos?
  terminal     Terminal?    @relation(name: "AgentToTerminal")
  supervision  Supervision? @relation(name: "AgentToSupervision")

  @@map("agents")
}

model Terminal {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  id_reference Int      @unique
  serial       String
  sim_card     Int
  pin          Int?
  puk          Int?
  created_at   DateTime @default(now())

  agent_id String? @unique @db.ObjectId
  agent    Agent?  @relation(name: "AgentToTerminal", fields: [agent_id], references: [id])

  @@map("terminals")
}

model Supervision {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  image           String?
  additional_info String?
  items           Json
  created_at      DateTime @default(now())
  updated_at      DateTime
  agent_id        String   @unique @db.ObjectId

  agent Agent @relation(name: "AgentToSupervision", fields: [agent_id], references: [id])

  @@map("supervisions")
}

model Province {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @unique
  created_at DateTime @default(now())

  cities City[]
  pos    Pos[]

  @@map("provinces")
}

model City {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  created_at  DateTime @default(now())
  province_id String   @db.ObjectId

  province Province @relation(fields: [province_id], references: [id])
  areas    Area[]
  pos      Pos[]

  @@map("cities")
}

model Area {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @unique
  created_at DateTime @default(now())
  city_id    String   @db.ObjectId

  city  City   @relation(fields: [city_id], references: [id])
  zones Zone[]
  pos   Pos[]

  @@map("areas")
}

model Zone {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  value      Int      @unique
  created_at DateTime @default(now())
  area_id    String   @db.ObjectId

  area Area  @relation(fields: [area_id], references: [id])
  pos  Pos[]

  @@map("zones")
}

model Type {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  created_at DateTime @default(now())

  subtypes Subtype[]
  pos      Pos[]

  @@map("types")
}

model Subtype {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  created_at DateTime @default(now())
  type_id    String   @db.ObjectId

  type Type  @relation(fields: [type_id], references: [id])
  pos  Pos[]

  @@map("subtypes")
}

model Licence {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  licence_reference String
  status            String
  created_at        DateTime @default(now())
  administration_id String   @unique @db.ObjectId

  pos            Pos?
  administration Administration @relation(name: "AdminLicence", fields: [administration_id], references: [id])

  @@map("licences")
}

model Administration {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  created_at DateTime @default(now())

  licence Licence? @relation("AdminLicence")
  pos     Pos[]

  @@map("administrations")
}

model IdCounter {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  value Int
}
